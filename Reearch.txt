//이분법
//근으로 수렴하는 속도가 느릴 때가 많다.
//항상 방정식의 근으로 수렴하고 오차 계산이 용이한 장점이 있다.
//따라서 이분법 보다 속도는 빠르나 초기값이 참값과 가깝지 않으면 발산할 수도 있는 다른 밥법의 초기값을 구하는 방법으로 사주 사용된다.

//Newton-Raphson Method
//비교적 수렴속도가 빠르고 널리 쓰인다. 그러나 함수 f가 미분 가능해야 한다는 것과 계산량이 이분법 보다 많다는 단점이 있다.
//또한 초기값에 민감
//초기치를 최소값으로 주면 즉 접선의 기울기가 0일 때는 구 할 수가 없다.

#include <stdio.h>
#include <math.h>

double F(double);	//대상 함수
double F1(double);	//대상 함수의 미분
double Bisection_(double a, double b); //바이색션 알고리즘
double Newton_Raphson_Method(double x0);	//Newton-Raphson Method

int main(int argc, char* argv[])
{
	double a, b; //임의의 두 점

	printf("INPUT a b : ");	//임의의 두 점을 입력 받음
	scanf_s("%lf", &a);	//작은 값
	scanf_s("%lf", &b);	//큰 값

	Newton_Raphson_Method(Bisection_(a, b));	//바이색션 알고리즘

	return 0;
}

double Bisection_(double a, double b)	//바이색션 알고리즘
{
	double e1 = 0.1; //x축과 F(min)사이의 거리가 e1이하인 경우 답이라고 가정한다.
	double e2 = 0.1; //a와 b의 사이가 너무 가까우면 프로그램 종료
	int Num = 1000; //루프 회전수 제한

	double min; //중간값
	int i = 1; //카운터

	while (i <= Num) //카운터가 Num이하인 경우 회전
	{
		min = a + (b - a) / 2; //a와 b의 중간값 계산

		printf("min = %lf F(min) = %lf\n", min,F(min)); //계산된 중간 값 출력

		if ((fabs(F(min)) < e1) || ((b - a) / 2 < e2)) //성공 계산
		{
			printf("Solution is %lf\n", min); //중간값 출력
			return min; //중간값 반환
		}
		i += 1; //카운터 증가
		if (F(b)*F(min) < 0) //a와 min의 Y값의 곱이 0보다 크면
			a = min; //중간값은 [min, b] 구간에 있는 것이므로 a의 값을 min으로 바꿔준다.
		else //그게 아니라면
			b = min; //중간값은 [a,min] 구간에 존재하므로 b의 값을 min으로 바꿔준다.
	}
	printf("Method Failed\n"); //위 조건이 만족 하지 않다면 중간값 찾기 실패
	return 0;
}

double Newton_Raphson_Method(double x0)	//Newton-Raphson Method
{
	int i, N;	//루프 회전 수
	double x, tol;	//해, x축에 얼마나 근접했는가(오차)
					//double f(double), f1(double);	//사용자 정의 함수(함수, 함수의 미분 값)

	N = 100;	//루프wpgks 10회 회전
			//x0 = 3.141592 / 4;// / 4.0;	//초기 값
	tol = 1.0e-6;	//오차

	i = 0;	//카운터 초기화
	while (i < N)	//루프
	{
		x = x0 - F(x0) / F1(x0);	//접선의 방정식의 해
		if (fabs(x - x0) < tol) // stopping condition	//정지 조건
		{
			printf("solution is %lf \n", x);	//DOS창 출력
			return 0;
		}
		i++;	//카운터 증가
		x0 = x;	//초기값 갱신
		printf("F[%lf] = %lf \n", x, F(x));	//DOS창 출력
	}
	printf("maximal %d iteration exceeded...\n", N); // failure	//실패 출력
	return 0;
}

// f(x) = e^(x) + x
double F(double x)	//대상 함수
{
	return exp(x) + x;
}

// f'(x) = e^(x) + x
double F1(double x)	//대상 함수의 미분 값
{
	return exp(x) + 1;
}
